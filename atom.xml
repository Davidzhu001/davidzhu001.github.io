<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weicheng&#39;s tech blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-18T19:31:53.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Weicheng Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpacker Rails的小讲</title>
    <link href="http://yoursite.com/2017/04/18/webpacker-rails%E7%9A%84%E5%B0%8F%E8%AE%B2/"/>
    <id>http://yoursite.com/2017/04/18/webpacker-rails的小讲/</id>
    <published>2017-04-18T05:00:00.000Z</published>
    <updated>2017-04-18T19:31:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpacker-简介"><a href="#Webpacker-简介" class="headerlink" title="Webpacker 简介"></a>Webpacker 简介</h2><blockquote>
<p>随着rails的广泛使用，大家可能意识到了。Rails对JavaScript的bundling还是有许多的不足的地方。但是，在不久rails讲支持 webpack 的使用在一个叫webpacker 的gem</p>
</blockquote>
<hr>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><h4 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. Rails 5+ （rails 4.2 +）</div><div class="line">2. Node js</div><div class="line">3. Yarn （NPM的取代）</div><div class="line">4. webpack</div></pre></td></tr></table></figure>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><h4 id="新建rails"><a href="#新建rails" class="headerlink" title="新建rails"></a>新建rails</h4><p>当你的rails 版本是在5.1+的时候可以在 rails new的时候加入以下的条件 (ruby 要求 2.6.11 <a href="http://weblog.rubyonrails.org/2017/3/20/Rails-5-1-rc1/" target="_blank" rel="external">详情</a>)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rails new aappnamepp --webpack --force</div><div class="line">rails new appname --webpack=react --force</div><div class="line">rails new appname --webpack=angular --force</div><div class="line">rails new appname --webpack=vue --force</div></pre></td></tr></table></figure>
<p>如果是以前的版本的rails 可以先创建rails app</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. rails new app</div><div class="line">2. rails webpacker:install</div><div class="line">3. rails webpacker:install:(vue，react, angular 可以选一个自己熟悉的前端)</div></pre></td></tr></table></figure>
<p>仔细看看rails 为我们创建了那些文件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Creating javascript app source directory</div><div class="line">      create  app/javascript</div><div class="line">      create  app/javascript/packs/application.js</div><div class="line">Copying binstubs</div><div class="line">       exist  bin</div><div class="line">      create  bin/webpack-dev-server</div><div class="line">      create  bin/webpack-watcher</div><div class="line">      create  bin/webpack</div><div class="line">      create  bin/yarn</div><div class="line">Copying webpack core config and loaders</div><div class="line">      create  config/webpack</div><div class="line">      create  config/webpack/configuration.js</div><div class="line">      create  config/webpack/development.js</div><div class="line">      create  config/webpack/development.server.js</div><div class="line">      create  config/webpack/development.server.yml</div><div class="line">      create  config/webpack/paths.yml</div><div class="line">      create  config/webpack/production.js</div><div class="line">      create  config/webpack/shared.js</div><div class="line">      create  config/webpack/test.js</div><div class="line">      create  config/webpack/loaders</div><div class="line">      create  config/webpack/loaders/assets.js</div><div class="line">      create  config/webpack/loaders/babel.js</div><div class="line">      create  config/webpack/loaders/coffee.js</div><div class="line">      create  config/webpack/loaders/erb.js</div><div class="line">      create  config/webpack/loaders/sass.js</div><div class="line">      create  .postcssrc.yml</div><div class="line">      append  .gitignore</div></pre></td></tr></table></figure>
<hr>
<ol>
<li>是在app/javascript文件夹底下的工作环境跟app/assets/javascript是有区别的.</li>
<li>bin文件夹底下的commands 如果注意的话，webpack-dev-server设置了一个不同的server</li>
<li>剩下的是在config底下的webpack的配置。可以设置你的不同的loader和工作的环境等等一切前端需要设置的。</li>
</ol>
<h3 id="关于server的一些小提示"><a href="#关于server的一些小提示" class="headerlink" title="关于server的一些小提示"></a>关于server的一些小提示</h3><blockquote>
<ol>
<li>rails s #是开启你的rails sercer port 3000</li>
<li>./bin/webpack-dev-server #开启的你Javascript的server port 8080</li>
</ol>
</blockquote>
<h3 id="当我们run-assets-precompile的时候-webpacker-compile-是被勾起来一起运行了"><a href="#当我们run-assets-precompile的时候-webpacker-compile-是被勾起来一起运行了" class="headerlink" title="当我们run assets:precompile的时候 webpacker:compile 是被勾起来一起运行了"></a>当我们run assets:precompile的时候 webpacker:compile 是被勾起来一起运行了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QQ 群：231387249 (Rails 交流主要)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Webpacker-简介&quot;&gt;&lt;a href=&quot;#Webpacker-简介&quot; class=&quot;headerlink&quot; title=&quot;Webpacker 简介&quot;&gt;&lt;/a&gt;Webpacker 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;随着rails的广泛使用，大家可能
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Machine Learning Day One (in English) --rookie</title>
    <link href="http://yoursite.com/2017/01/01/machine-learning-day-one/"/>
    <id>http://yoursite.com/2017/01/01/machine-learning-day-one/</id>
    <published>2017-01-01T20:26:21.000Z</published>
    <updated>2017-03-17T16:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Hey guys, I am a soft-ware developer. This year I want to learn more about Machine Learning(ML). So, I will post everything I have learned from the courses, videos, blog posts of ML and share with you guys. If You found any mistakes on any of my posts, feel free to comment on it so we can grow together.</code></p>
<h1 id="Day-One"><a href="#Day-One" class="headerlink" title="Day One"></a>Day One</h1><hr>
<h2 id="What-is-Machine-learning？"><a href="#What-is-Machine-learning？" class="headerlink" title="What is Machine learning？"></a>What is Machine learning？</h2><p>In a short conclusion of mine, it is way to teach a machine how to learn by itself through the data it collected. Personally, I think it is a super power that humans can have in the future. Machine learning is to create a smart machine which grows by us feeding data to it. It can be really dangerous and helpful.</p>
<blockquote>
<p>Two definitions of Machine Learning are offered. </p>
<ol>
<li>Arthur Samuel described it as:  <strong>“the field of study that gives computers the ability to learn without being explicitly programmed.”</strong> This is an older, informal definition.</li>
<li>Tom Mitchell provides a more modern definition: <strong>“A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.”</strong> <a href="https://www.coursera.org/learn/machine-learning/home/week/1" target="_blank" rel="external">Stanford University Online</a></li>
</ol>
</blockquote>
<h3 id="Two-Ways-of-learning"><a href="#Two-Ways-of-learning" class="headerlink" title="Two Ways of learning."></a>Two Ways of learning.</h3><h4 id="1-supervised-Learning"><a href="#1-supervised-Learning" class="headerlink" title="1. supervised Learning"></a>1. supervised Learning</h4><blockquote>
<p>In supervised learning, we are given a data set and already know what our correct output should look like, having the idea that there is a relationship between the input and the output.</p>
<p>Supervised learning problems are categorized into “regression” and “classification” problems.</p>
<p>In a regression problem, we are trying to predict results within a continuous output, meaning that we are trying to map input variables to some continuous function.</p>
<p>In a classification problem, we are instead trying to predict results in a discrete output. In other words, we are trying to map input variables into discrete categories</p>
<p>(a) Regression - Given a picture of a person, we have to predict their age on the basis of the given picture</p>
<p>(b) Classification - Given a patient with a tumor, we have to predict whether the tumor is malignant or benign. – <a href="https://www.coursera.org/learn/machine-learning/home/week/1" target="_blank" rel="external">Stanford University Online</a></p>
</blockquote>
<hr>
<h4 id="2-Unsupervised-Learning"><a href="#2-Unsupervised-Learning" class="headerlink" title="2. Unsupervised Learning"></a><strong>2. Unsupervised Learning</strong></h4><p>Unsupervised learning allows us to approach problems with little or no idea what our results should look like. We can derive structure from data where we don’t necessarily know the effect of the variables.</p>
<blockquote>
<p>We can derive this structure by clustering the data based on relationships among the variables in the data.</p>
<p>With unsupervised learning there is no feedback based on the prediction results.</p>
<p>Example:</p>
<p>Clustering: Take a collection of 1,000,000 different genes, and find a way to automatically group these genes into groups that are somehow similar or related by different variables, such as lifespan, location, roles, and so on.</p>
<p>Non-clustering: The “Cocktail Party Algorithm”, allows you to find structure in a chaotic environment. (i.e. identifying individual voices and music from a mesh of sounds at a cocktail party).–  <a href="https://www.coursera.org/learn/machine-learning/home/week/1" target="_blank" rel="external">Stanford University Online</a></p>
</blockquote>
<p>From a personal definition after the first day of learning it, I conclude that the differences between these two are, <strong>supervised learning</strong> is to give a structure of a bunch of data. <strong>Unsupervised learning</strong> is that to give machine a whole bunch of data, let machine itself to find the rules, structures.</p>
<h4 id="Thanks-for-reading-my-blog-see-you-next-time"><a href="#Thanks-for-reading-my-blog-see-you-next-time" class="headerlink" title="Thanks for reading my blog, see you next time."></a>Thanks for reading my blog, see you next time.</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Hey guys, I am a soft-ware developer. This year I want to learn more about Machine Learning(ML). So, I will post everything I have 
    
    </summary>
    
    
      <category term="machine_learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>服务器 SSH 登录设置</title>
    <link href="http://yoursite.com/2015/09/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%20SSH%20%E7%99%BB%E5%BD%95%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2015/09/12/服务器 SSH 登录设置/</id>
    <published>2015-09-12T05:00:00.000Z</published>
    <updated>2017-04-03T20:13:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器-SSH-登录设置"><a href="#服务器-SSH-登录设置" class="headerlink" title="服务器 SSH 登录设置"></a>服务器 SSH 登录设置</h2><blockquote>
<p>SSH 密匙提供了比相对账号密码登录安全的登录方法。SSH keys 提供创建public或private 密匙。你可以把public密匙放在服务器上，解密的方法是通过核实在你的一个机器上的private配对。如果配对成功，你可以不用提供账号密码的登录系统。</p>
</blockquote>
<hr>
<blockquote>
<p>两种加密方法  RSA 与 DSA（具体可以百度/google）<br>DSA：只用用于数字签名认证。<br>RSA：可以用在数字签名认证，也可以用在算法认证。</p>
<p>今天我们用到RSA加密</p>
</blockquote>
<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><h4 id="创建密匙"><a href="#创建密匙" class="headerlink" title="创建密匙"></a>创建密匙</h4><p>打开你的终端输入（遇到问题就按enter。下面我简单的讲解下）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#   第一行</div><div class="line">Enter file in which to save the key (/home/username/.ssh/id_rsa):</div><div class="line"># 这句话就是说，系统会创建在你的用户名下的/.ssh/id_rsa目录下</div><div class="line">剩下的新手可以忽略了，有兴趣的 QQ群可以咨询下。</div></pre></td></tr></table></figure>
<p>当指令完成的时候，系统会创建两个文件，一个是<strong><em>id_rsa.pub</em></strong>另一个是<strong>id_rsa</strong></p>
<ol>
<li>id_rsa.pub是你放在服务器上，这样你的电脑和服务器可以产生自动登录认证。</li>
<li>id_rsa是你的私密，妥善安放。</li>
</ol>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><h4 id="安放公共密匙在server"><a href="#安放公共密匙在server" class="headerlink" title="安放公共密匙在server"></a>安放公共密匙在server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id user@111.11.11.11</div><div class="line">#或者</div><div class="line">cat ~/.ssh/id_rsa.pub | ssh user@111.11.11.11 &quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt;  ~/.ssh/authorized_keys&quot;</div></pre></td></tr></table></figure>
<p>目的是把你的<strong>id_rsa.pub</strong>的内容放在服务器的 <strong>~/.ssh/authorized_keys</strong>里面。</p>
<p>一下的提示记得把你服务器的密码输入一遍。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed</div><div class="line">/usr/bin/ssh-copy-id: INFO: 2 key(s) remain to be installed -- if you are prompted now it is to install the new keys</div><div class="line">root@111.11.11.11&apos;s password:</div><div class="line"></div><div class="line">Number of key(s) added:        2</div><div class="line"></div><div class="line">Now try logging into the machine, with:   &quot;ssh &apos;root@111.11.11.11&apos;&quot;</div><div class="line">and check to make sure that only the key(s) you wanted were added.</div></pre></td></tr></table></figure>
<p>提示：</p>
<ol>
<li>如果不记得server的ip， 可以使用域名代替。root@mydomain.com</li>
<li>user@, root@, user2@ 记得专属的用户指定。</li>
</ol>
<p>检查</p>
<ul>
<li>[ ] 创建密匙</li>
<li>[ ] 把密匙放到server</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">QQ 群：231387249 (Rails 交流主要)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务器-SSH-登录设置&quot;&gt;&lt;a href=&quot;#服务器-SSH-登录设置&quot; class=&quot;headerlink&quot; title=&quot;服务器 SSH 登录设置&quot;&gt;&lt;/a&gt;服务器 SSH 登录设置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;SSH 密匙提供了比相对账号密码登
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rails Active Record 2  ( in Chinese)</title>
    <link href="http://yoursite.com/2015/08/11/rails-Active-Record-Associations-2/"/>
    <id>http://yoursite.com/2015/08/11/rails-Active-Record-Associations-2/</id>
    <published>2015-08-11T05:00:00.000Z</published>
    <updated>2017-03-17T16:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Rails的关联是给两个model之间的关系进行明确，从而使常规的操作更加的简单化。</p>
<h2 id="续"><a href="#续" class="headerlink" title="续"></a>续</h2><h3 id="has-many-through"><a href="#has-many-through" class="headerlink" title="has_many :through"></a>has_many :through</h3><p>has_many through 是对 has_and_belongs_to_many 方法的延伸。has_and_belongs_to_many只需要一个 join table，然后has many through 需要一个 join table 和join model。</p>
<p>有人可能会问，问什么我需要一个 has_many :through去做一个many to many 的关系式呢？</p>
<blockquote>
<p>设想如果你有一个 <strong>student model</strong> 一个 <strong>course model</strong> 还有一个关联model 叫做 <strong>enrollment</strong>。 这个关联model 不仅需要连接 <strong>student</strong> 和 <strong>course</strong> 的关系， 还要记录 这个 student 是什么时候 参加这个 course的。 这个时候，join model 就会可以提供储存更多的信息。</p>
</blockquote>
<hr>
<h3 id="Student-Model"><a href="#Student-Model" class="headerlink" title="Student Model"></a>Student Model</h3><table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>小明</td>
<td>23</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Course-Model"><a href="#Course-Model" class="headerlink" title="Course Model"></a>Course Model</h3><table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>计算机</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="Student-Enrollment"><a href="#Student-Enrollment" class="headerlink" title="Student Enrollment"></a>Student Enrollment</h3><table>
<thead>
<tr>
<th>id</th>
<th>student_id</th>
<th>course_id</th>
<th>created_at</th>
<th style="text-align:center">join_time</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>#sometime</td>
<td style="text-align:center">#sometime</td>
</tr>
</tbody>
</table>
<hr>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_many <span class="symbol">:student_enrollments</span></div><div class="line">  has_many <span class="symbol">:courses</span>, <span class="symbol">through:</span> <span class="symbol">:student_enrollments</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentEnrollment</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:Student</span></div><div class="line">  belongs_to <span class="symbol">:Course</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_many <span class="symbol">:student_enrollments</span>  </div><div class="line">  has_many <span class="symbol">:students</span>, <span class="symbol">through:</span> <span class="symbol">:student_enrollments</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<hr>
<h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rails的关联是给两个model之间的关系进行明确，从而使常规的操作更加的简单化。&lt;/p&gt;
&lt;h2 id=&quot;续&quot;&gt;&lt;a href=&quot;#续&quot; class=&quot;headerlink&quot; title=&quot;续&quot;&gt;&lt;/a&gt;续&lt;/h2&gt;&lt;h3 id=&quot;has-many-through&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rails Active Record ( in Chinese)</title>
    <link href="http://yoursite.com/2015/08/10/rails-Active-Record-Associations/"/>
    <id>http://yoursite.com/2015/08/10/rails-Active-Record-Associations/</id>
    <published>2015-08-10T05:00:00.000Z</published>
    <updated>2017-03-17T16:58:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Rails的关联是给两个model之间的关系进行明确，从而使常规的操作更加的简单化。</p>
<h2 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h2><p>设想你有个用户model user, 然后你想收集user的个人地址 address。当一个用户有2-3个不同的地址。一个是工作地址另一个是家庭地址。<br>在user的model底下加个关联的address model，这样一来可以方便数据的整理。</p>
<h2 id="rails所支持的关联"><a href="#rails所支持的关联" class="headerlink" title="rails所支持的关联"></a>rails所支持的关联</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1. belongs_to</div><div class="line">2. has_one</div><div class="line">3. has_many</div><div class="line">4. has_and_belongs_to_many</div><div class="line">4. has_many :through</div><div class="line">5. has_one :through</div></pre></td></tr></table></figure>
<h3 id="has-one-和-belongs-to-关联"><a href="#has-one-和-belongs-to-关联" class="headerlink" title="has_one 和 belongs_to 关联"></a>has_one 和 belongs_to 关联</h3><blockquote>
<p>设想我们需要创建一个用户 model user， 每个用户拥有一个 个人信息 personal_profile model.</p>
</blockquote>
<p>这个时候，用户user 对 个人信息 personal_profile 的关系就是 <strong>has_one</strong>. 个人信息 personal_profile 对 用户 user 的关系就是 <strong>belongs_to</strong>.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:personal_profile</span>, <span class="symbol">dependent:</span> <span class="symbol">:destroy</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonalProfile</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:User</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<hr>
<p>在个人信息 personal_profile 数据库的表中，我们添加了一个 foreign_key 去发现所关联的信息。</p>
<h5 id="下面是personal-profile的一个数据表-user-id-则是-个人信息的foreign-key"><a href="#下面是personal-profile的一个数据表-user-id-则是-个人信息的foreign-key" class="headerlink" title="下面是personal_profile的一个数据表. user_id 则是 个人信息的foreign key"></a>下面是personal_profile的一个数据表. user_id 则是 个人信息的foreign key</h5><table>
<thead>
<tr>
<th>id</th>
<th>user_id</th>
<th>phone_number</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>612-323-2415</td>
</tr>
</tbody>
</table>
<p><code>注意dependent: :destroy 是为了防止orphan record 孤儿数据的存在。换句话说，就是如果我们删除了一个用户 user 没有删除他的个人信息 personal_profile。
这样一来，被删除用户 user 的 个人信息 personal_profile 就变成了一个孤儿数据
rails 5 禁止了孤儿数据的创建，想起请参考以下链接</code><br><a href="guides.rubyonrails.org">链接 link</a></p>
<h3 id="has-many-和-belongs-to-关联"><a href="#has-many-和-belongs-to-关联" class="headerlink" title="has_many 和 belongs_to 关联"></a>has_many 和 belongs_to 关联</h3><blockquote>
<p>设想用户user model 有很多地址 addresses. 例如，家庭地址，工作地址等等。</p>
</blockquote>
<p>这样我们就可以用 <strong>has many</strong> 和 <strong>belongs_to</strong> 的关系了。<br>这个时候，用户user 对 地址 address 的关系就是 <strong>has_many</strong>. 地址 address 对 用户 user 的关系就是 <strong>belongs_to</strong>.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_one <span class="symbol">:addresses</span>, <span class="symbol">dependent:</span> <span class="symbol">:destroy</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span> &lt; ActiveRecord::Base</span></div><div class="line">  belongs_to <span class="symbol">:User</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="has-and-belongs-to-many"><a href="#has-and-belongs-to-many" class="headerlink" title="has_and_belongs_to_many"></a>has_and_belongs_to_many</h3><blockquote>
<p>设想用户 user 可以参加很多的 课程班 courses. 一个课程班 course 有很多的用户 users。</p>
</blockquote>
<p>这个时候，无论用户user 对课程班 course的关系 还是课程班 course 对用户 user的关系，即是has_many 又是 belongs_to_many。换句话说，课程班有很多的用户，用户可以参加课程班。</p>
<p>这是如果只是在table 上加个 foreign key 已经满足不了我们的需求了。<br>这个时候我们需要一个 join table可以包含 两个model的foreign keys。</p>
<table>
<thead>
<tr>
<th>user_id</th>
<th>course_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>612-323-2415</td>
</tr>
</tbody>
</table>
<p><code>针对has_and_belongs_to_many， join table只是起到一个连接的作用。这时id起到可有可无的作用。 如果想延伸join table的用处。请用 has_many: :through</code></p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_and_belongs_to_many <span class="symbol">:course</span>, <span class="symbol">dependent:</span> <span class="symbol">:destroy</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span> &lt; ActiveRecord::Base</span></div><div class="line">  has_and_belongs_to_many <span class="symbol">:User</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<h3 id="has-many-through"><a href="#has-many-through" class="headerlink" title="has_many :through"></a>has_many :through</h3><p>has_many through 是对 has_and_belongs_to_many 方法的延伸。has_and_belongs_to_many只需要一个 join table，然后has many through 需要一个 join table 和join model。</p>
<p>#未完待续</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Rails的关联是给两个model之间的关系进行明确，从而使常规的操作更加的简单化。&lt;/p&gt;
&lt;h2 id=&quot;举个例子&quot;&gt;&lt;a href=&quot;#举个例子&quot; class=&quot;headerlink&quot; title=&quot;举个例子&quot;&gt;&lt;/a&gt;举个例子&lt;/h2&gt;&lt;p&gt;设想你有个用户model
    
    </summary>
    
    
  </entry>
  
</feed>
